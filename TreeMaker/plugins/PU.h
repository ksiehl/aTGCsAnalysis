// For information see PUTrueDistProducer/doc/PUReweighting.txt

#ifndef PU_H
#define PU_H
 std::vector<float> PU_data, PU_MC;

 /* Pileup is extracted with command:
 * pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/Final/Cert_271036-284044_13TeV_PromptReco_Collisions16_JSON.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 69200 --maxPileupBin 75 --numPileupBins 75 MyDataPileupHistogram.root
 */
float PU_data_f[50] = {
					4.07905981095e-07 ,
					6.46868965726e-06 ,
					4.31251234201e-05 ,
					0.000112740522978 ,
					0.000185805819086 ,
					0.000250628404513 ,
					0.000343808215205 ,
					0.00160514026836 ,
					0.0053559394764 ,
					0.00890485009822 ,
					0.0141589747463 ,
					0.0219824592363 ,
					0.033057355943 ,
					0.0491740477796 ,
					0.0684327429077 ,
					0.0852440311894 ,
					0.0960379347792 ,
					0.10080522323 ,
					0.0995956703247 ,
					0.0929668839536 ,
					0.0823493751899 ,
					0.0693206266628 ,
					0.0553835363731 ,
					0.0417962926189 ,
					0.0295445859 ,
					0.0193725335228 ,
					0.0116848371338 ,
					0.00644867241147 ,
					0.00325249536899 ,
					0.0015042913411 ,
					0.000643055617308 ,
					0.000257229440005 ,
					9.80085124829e-05 ,
					3.65829070001e-05 ,
					1.408444309e-05 ,
					6.12898387595e-06 ,
					3.34911040406e-06 ,
					2.34620048171e-06 ,
					1.94219664664e-06 ,
					1.74480849359e-06 ,
					1.62743535083e-06 ,
					1.54866700542e-06 ,
					1.49261819285e-06 ,
					1.45063170225e-06 ,
					1.41558003798e-06 ,
					1.38190417374e-06 ,
					1.34671499961e-06 ,
					1.30723064026e-06 ,
					1.26185954139e-06 ,
					1.21000205496e-06 ,

};

/* MC distribution is taken from: 
* https://github.com/cms-sw/cmssw/blob/CMSSW_8_0_X/SimGeneral/MixingModule/python/mix_2016_25ns_Moriond17MC_PoissonOOTPU_cfi.py
*/
float PU_MC_f[75] =
{
	1.78653e-05 ,
	2.56602e-05 ,
	5.27857e-05 ,
	8.88954e-05 ,
	0.000109362 ,
	0.000140973 ,
	0.000240998 ,
	0.00071209 ,
	0.00130121 ,
	0.00245255 ,
	0.00502589 ,
	0.00919534 ,
	0.0146697 ,
	0.0204126 ,
	0.0267586 ,
	0.0337697 ,
	0.0401478 ,
	0.0450159 ,
	0.0490577 ,
	0.0524855 ,
	0.0548159 ,
	0.0559937 ,
	0.0554468 ,
	0.0537687 ,
	0.0512055 ,
	0.0476713 ,
	0.0435312 ,
	0.0393107 ,
	0.0349812 ,
	0.0307413 ,
	0.0272425 ,
	0.0237115 ,
	0.0208329 ,
	0.0182459 ,
	0.0160712 ,
	0.0142498 ,
	0.012804 ,
	0.011571 ,
	0.010547 ,
	0.00959489 ,
	0.00891718 ,
	0.00829292 ,
	0.0076195 ,
	0.0069806 ,
	0.0062025 ,
	0.00546581 ,
	0.00484127 ,
	0.00407168 ,
	0.00337681 ,
	0.00269893 ,
	0.00212473 ,
	0.00160208 ,
	0.00117884 ,
	0.000859662 ,
	0.000569085 ,
	0.000365431 ,
	0.000243565 ,
	0.00015688 ,
	9.88128e-05 ,
	6.53783e-05 ,
	3.73924e-05 ,
	2.61382e-05 ,
	2.0307e-05 ,
	1.73032e-05 ,
	1.435e-05 ,
	1.36486e-05 ,
	1.35555e-05 ,
	1.37491e-05 ,
	1.34255e-05 ,
	1.33987e-05 ,
	1.34061e-05 ,
	1.34211e-05 ,
	1.34177e-05 ,
	1.32959e-05 ,
	1.33287e-05
};

std::vector<float> MC_dist(){ 
	for (unsigned int iPU = 0; iPU < 75; iPU++){
		PU_MC.push_back(PU_MC_f[iPU]);
	}
	return PU_MC;};
std::vector<float> data_dist(){ 
		for (unsigned int iPU = 0; iPU < 75; iPU++){
		PU_data.push_back(PU_data_f[iPU]);
	}
	return PU_data;};

#endif
